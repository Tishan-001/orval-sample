/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * Pets API
 * A simple Express Pets API

You can find the Swagger specification files here:
- [Swagger JSON](/documentation/swagger.json)
- [Swagger YAML](/documentation/swagger.yaml)
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  NewPet,
  Pet
} from '../models'



/**
 * Returns a list of all pets
 * @summary Retrieve a list of pets
 */
export const getPets = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Pet[]>> => {
    
    return axios.default.get(
      `http://localhost:8080/pets`,options
    );
  }


export const getGetPetsQueryKey = () => {
    return [`http://localhost:8080/pets`] as const;
    }

    
export const getGetPetsQueryOptions = <TData = Awaited<ReturnType<typeof getPets>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPets>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPetsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPets>>> = ({ signal }) => getPets({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPets>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPetsQueryResult = NonNullable<Awaited<ReturnType<typeof getPets>>>
export type GetPetsQueryError = AxiosError<void>


export function useGetPets<TData = Awaited<ReturnType<typeof getPets>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPets>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetPets<TData = Awaited<ReturnType<typeof getPets>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPets>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetPets<TData = Awaited<ReturnType<typeof getPets>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPets>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Retrieve a list of pets
 */

export function useGetPets<TData = Awaited<ReturnType<typeof getPets>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPets>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPetsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Adds a new pet to the system
 * @summary Create a new pet
 */
export const postPets = (
    newPet: NewPet, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Pet>> => {
    
    return axios.default.post(
      `http://localhost:8080/pets`,
      newPet,options
    );
  }



export const getPostPetsMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPets>>, TError,{data: NewPet}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof postPets>>, TError,{data: NewPet}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postPets>>, {data: NewPet}> = (props) => {
          const {data} = props ?? {};

          return  postPets(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostPetsMutationResult = NonNullable<Awaited<ReturnType<typeof postPets>>>
    export type PostPetsMutationBody = NewPet
    export type PostPetsMutationError = AxiosError<void>

    /**
 * @summary Create a new pet
 */
export const usePostPets = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postPets>>, TError,{data: NewPet}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof postPets>>,
        TError,
        {data: NewPet},
        TContext
      > => {

      const mutationOptions = getPostPetsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Retrieve a pet's details by its ID
 * @summary Get a pet by ID
 */
export const getPetsPetId = (
    petId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Pet>> => {
    
    return axios.default.get(
      `http://localhost:8080/pets/${petId}`,options
    );
  }


export const getGetPetsPetIdQueryKey = (petId: string,) => {
    return [`http://localhost:8080/pets/${petId}`] as const;
    }

    
export const getGetPetsPetIdQueryOptions = <TData = Awaited<ReturnType<typeof getPetsPetId>>, TError = AxiosError<void>>(petId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetsPetId>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPetsPetIdQueryKey(petId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPetsPetId>>> = ({ signal }) => getPetsPetId(petId, { signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(petId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPetsPetId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetPetsPetIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPetsPetId>>>
export type GetPetsPetIdQueryError = AxiosError<void>


export function useGetPetsPetId<TData = Awaited<ReturnType<typeof getPetsPetId>>, TError = AxiosError<void>>(
 petId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetsPetId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPetsPetId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetPetsPetId<TData = Awaited<ReturnType<typeof getPetsPetId>>, TError = AxiosError<void>>(
 petId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetsPetId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPetsPetId>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetPetsPetId<TData = Awaited<ReturnType<typeof getPetsPetId>>, TError = AxiosError<void>>(
 petId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetsPetId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get a pet by ID
 */

export function useGetPetsPetId<TData = Awaited<ReturnType<typeof getPetsPetId>>, TError = AxiosError<void>>(
 petId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPetsPetId>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetPetsPetIdQueryOptions(petId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * Update a pet's details by its ID
 * @summary Update a pet
 */
export const putPetsPetId = (
    petId: string,
    newPet: NewPet, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Pet>> => {
    
    return axios.default.put(
      `http://localhost:8080/pets/${petId}`,
      newPet,options
    );
  }



export const getPutPetsPetIdMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPetsPetId>>, TError,{petId: string;data: NewPet}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof putPetsPetId>>, TError,{petId: string;data: NewPet}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putPetsPetId>>, {petId: string;data: NewPet}> = (props) => {
          const {petId,data} = props ?? {};

          return  putPetsPetId(petId,data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutPetsPetIdMutationResult = NonNullable<Awaited<ReturnType<typeof putPetsPetId>>>
    export type PutPetsPetIdMutationBody = NewPet
    export type PutPetsPetIdMutationError = AxiosError<void>

    /**
 * @summary Update a pet
 */
export const usePutPetsPetId = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putPetsPetId>>, TError,{petId: string;data: NewPet}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof putPetsPetId>>,
        TError,
        {petId: string;data: NewPet},
        TContext
      > => {

      const mutationOptions = getPutPetsPetIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * Delete a pet by its ID
 * @summary Delete a pet
 */
export const deletePetsPetId = (
    petId: string, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `http://localhost:8080/pets/${petId}`,options
    );
  }



export const getDeletePetsPetIdMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePetsPetId>>, TError,{petId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof deletePetsPetId>>, TError,{petId: string}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deletePetsPetId>>, {petId: string}> = (props) => {
          const {petId} = props ?? {};

          return  deletePetsPetId(petId,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeletePetsPetIdMutationResult = NonNullable<Awaited<ReturnType<typeof deletePetsPetId>>>
    
    export type DeletePetsPetIdMutationError = AxiosError<void>

    /**
 * @summary Delete a pet
 */
export const useDeletePetsPetId = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deletePetsPetId>>, TError,{petId: string}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof deletePetsPetId>>,
        TError,
        {petId: string},
        TContext
      > => {

      const mutationOptions = getDeletePetsPetIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
